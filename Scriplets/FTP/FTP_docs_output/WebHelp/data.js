var contents = new Array("                About / Credits\n\r\n\r\n\rFTP objects by shajul\n\r\n\rOriginal FTP Functions by Olfen &amp; Andreone - thread10393\n\rModified by ahklerner - post\n\r\n\rModified by me for AHK_L, \n\r- added object syntax \n\r- added GetCurrentDirectory() \n\r- corrected FileTime retrieval from Win32_Find_Data structure \n\r- created documentation (thanks fincs for GenDocs and Scite4Autohotkey)\n\r\n\rHome Thread&nbsp;|   Documentation |   Download     \n\r\n\r\n\r&nbsp;\n\r\n\rChangelog:\n\r\n\rUpdate 2011-01-17: \n\r- Added FTP_Init(), which needs to be called first to retrieve Object reference \n\r- Error/Extended Error (if any) is retrieved in human readable form [.LastError property] \n\r- FTP connection properties can be set (see documentation) \n\r - Uses only one global variable (an object)\n\r\n\rUpdate 2011-01-21: \n\r- Added .InternetReadFile() and .InternetWriteFile() methods \n\r  - Progress indicator for uploads and downloads\n\r\n\rUpdate 2011-02-03:\n\r- Bugfixes\n\r- FTP_Init() now has two optional parameters - Proxy and ProxyBypass\n\r     - oFTP.CloseSocket() function added","About","scr\\About.htm","FTP_Init()\n\r\n\rInitializes and returns the FTP object (MUST be called before any other functions            )\n\r\n\rFTP_Init([Proxy, ProxyBypass])ParametersProxy\n\r\n\r(Optional) Connect via proxy (TIS FTP gateway, Socks only if IE installed)ProxyBypass\n\r\n\r(Optional) Bypass addresses from proxy (localhost bypassed by default)Return ValueReturns object with Methods and Properties as described belowRemarks\n\r\n\rOptions can be set (see Properties) before calling oFTP.Open() methodMethods.Open()\n\r\n\r&nbsp;Connect to FTP server\n\r.GetCurrentDirectory()\n\r\n\r&nbsp;Get current directory path on FTP server\n\r.SetCurrentDirectory()\n\r\n\r&nbsp;Sets the current directory path on FTP server.CreateDirectory()\n\r\n\r&nbsp;Creates a new directory on FTP server.RemoveDirectory()\n\r\n\r&nbsp;Deletes a directory on FTP server.PutFile()\n\r\n\r&nbsp;Uploads a file to FTP location.GetFile()\n\r\n\r&nbsp;Retrieves a file.GetFileSize()\n\r\n\r&nbsp;Get file size\n\r.DeleteFile()\n\r\n\r&nbsp;Delete a remote file\n\r.RenameFile()\n\r\n\r&nbsp;Rename a remote file\n\r.Close()\n\r\n\r&nbsp;Close FTP connection and cleanup\n\r.CloseSocket()\n\r\n\r&nbsp;Close FTP connection and cleanup\n\r.GetFileInfo()\n\r\n\r&nbsp;Get File info from WIN32_FIND_DATA structure.FindFirstFile()\n\r\n\r&nbsp;Returns an object with file details\n\r.FindNextFile()\n\r\n\r&nbsp;Returns an object with file details.InternetReadFile()\n\r\n\r&nbsp;Downloads a file (with progress bar)\n\r.InternetWriteFile()\n\r\n\r&nbsp;Uploads a file (with progress bar)Properties.Port\n\r\n\r&nbsp;Port 21 by default\n\r.hModule\n\r\n\r&nbsp;Handle of Wininet module\n\r.o_hInternet\n\r\n\r&nbsp;Handle of Internet open\n\r.hInternet\n\r\n\r&nbsp;Handle of FTP session (after oFTP.Open has been called)\n\r.LastError\n\r\n\r&nbsp;Error message + Extended error message (if any) in human readable format\n\r.InternetConnectFlags\n\r\n\r&nbsp;0 by default, 0x08000000 for INTERNET_FLAG_PASSIVE\n\rRelated\n\r\n\rFTP_Open()Example; initialize and get reference to FTP objectftp := FTP_Init(); connect to FTP serverif !ftp.Open(\"ftp.autohotkey.net\", \"myUserName\", \"myPassword\")  {  MsgBox % ftp.LastError  ExitApp  }; get current directorysOrgPath := ftp.GetCurrentDirectory()if !sOrgPath  MsgBox % ftp.LastError  ; upload a file with progressftp.InternetWriteFile( A_ScriptDir . \"\\FTP.zip\" ); download a file with progressftp.InternetReadFile( \"FTP.zip\" , \"delete_me.zip\"); delete the fileftp.DeleteFile(\"FTP.zip\"); create a new directory \'testing\'if !ftp.CreateDirectory(\"testing\")  MsgBox % ftp.LastError;; Error-checking code omitted from here on for brevity; set the current directory to \'root/testing\'ftp.SetCurrentDirectory(\"testing\"); upload this script fileftp.PutFile(A_ScriptFullPath, A_ScriptName); rename script to \'mytestscript.ahk\'ftp.RenameFile(A_ScriptName, \"MyTestScript.ahk\"); enumerate the file list from the current directory (\'root/testing\')item := ftp.FindFirstFile(\"/testing/*\")MsgBox % \"Name : \" . item.Name . \"`nCreationTime : \" . item.CreationTime . \"`nLastAccessTime : \" . item.LastAccessTime . \"`nLastWriteTime : \" . item.LastWriteTime . \"`nSize : \" . item.Size . \"`nAttribs : \" . item.AttribsLoop{  if !(item := FTP_FindNextFile())    break  MsgBox % \"Name : \" . item.Name   . \"`nCreationTime : \" . item.CreationTime   . \"`nLastAccessTime : \" . item.LastAccessTime   . \"`nLastWriteTime : \" . item.LastWriteTime   . \"`nSize : \" . item.Size   . \"`nAttribs : \" . item.Attribs}; retrieve the file from the FTP serverftp.GetFile(\"MyTestScript.ahk\", A_ScriptDir . \"\\MyTestScript.ahk\", 0); delete the file from the FTP serverftp.DeleteFile(\"MyTestScript.ahk\"); set the current directory back to the rootftp.SetCurrentDirectory(sOrgPath); remove the direcrtory \'testing\'ftp.RemoveDirectory(\"testing\"); close the FTP connection, free libraryftp.Close()#Include FTP.ahk","FTP_Init()","scr\\FTP_Init.htm","oFTP.Close()\n\r\n\rClose FTP session, wininet internet handle, unload library, free resources.\n\r\n\roFTP.Close()Parameters\n\r\n\rNone.Return Value\n\r\n\rNone.Remarks\n\r\n\rRequired only when FTP is no longer required (See oFTP.CloseSocket aslo)Related\n\r\n\rFTP_Open()&nbsp;, oFTP.CloseSocket()ExampleoFTP.close()","oFTP.Close()","scr\\Methods/oFTP.Close.htm","oFTP.CloseSocket()\n\r\n\rCloses session created by oFTP.Open\n\r\n\roFTP.CloseSocket()Parameters\n\r\n\rNone.Return ValueTrue on success, false otherwiseRemarks\n\r\n\rThe wininet module and wininet Internet open handles are not released.Related\n\r\n\roFTP.Open(), oFTP.Close()ExampleoFTP.CloseSocket() \n\r;you can now create a new session with oFTP.Open","oFTP.CloseSocket()","scr\\Methods/oFTP.CloseSocket.htm","oFTP.CreateDirectory()\n\r\n\rCreates a new directory on FTP server\n\r\n\roFTP.CreateDirectory(DirName)ParametersDirName\n\r\n\rNew directory name on FTP serverReturn ValueTrue on successRemarks\n\r\n\rNoneRelated\n\r\n\roFTP.RemoveDirectory()ExampleoFTP.CreateDirectory(&quot;testing&quot;)","oFTP.CreateDirectory()","scr\\Methods/oFTP.CreateDirectory.htm","oFTP.DeleteFile()\n\r\n\rDeletes a file\n\r\n\roFTP.Deletefile(FileName)ParametersFileName\n\r\n\rExisting file name (fully qualified path or relative path to current dir)Return ValueTrue on success, false otherwiseRemarks\n\r\n\rnoneRelated\n\r\n\roFTP.RenameFile()ExampleoFTP.DeleteFile(&quot;MyTestScript.ahk&quot;)","oFTP.DeleteFile()","scr\\Methods/oFTP.DeleteFile.htm","oFTP.FindFirstFile()\n\r\n\rGet first file\n\r\n\roFTP.FindFirstFile(SearchFile)ParametersSearchFile\n\r\n\rfile(mask) to search forReturn ValueReturns an object (oFile) with file details (properties described below)PropertiesoFile.Name\n\r\n\rName of FileoFile.CreationTime\n\r\n\rCreation TimeoFile.LastAccessTime\n\r\n\rLast Access TimeoFile.LastWriteTime\n\r\n\rLast Write TimeoFile.Size\n\r\n\rFile Size in bytesoFile.Attribs\n\r\n\rString of file attributesRemarks\n\r\n\r\n\r\n\rNone.\n\r\n\rRelated\n\r\n\roFTP.GetFileInfo(), oFTP.FindNextFile()Example; None.","oFTP.FindFirstFile()","scr\\Methods/oFTP.FindFirstFile.htm","oFTP.FindNextFile()\n\r\n\rGet next file\n\r\n\roFTP.FindNextFile()Parameters\n\r\n\rNone.Return ValueReturns an object (oFile) with file details (properties described below)PropertiesoFile.Name\n\r\n\rName of FileoFile.CreationTime\n\r\n\rCreation TimeoFile.LastAccessTime\n\r\n\rLast Access TimeoFile.LastWriteTime\n\r\n\rLast Write TimeoFile.Size\n\r\n\rFile Size in bytesoFile.Attribs\n\r\n\rString of file attributesRemarks\n\r\n\r\n\r\n\rNone.Related\n\r\n\roFTP.GetFileInfo(), oFTP.FindFirstFile()Example; None.","oFTP.FindNextFile()","scr\\Methods/oFTP.FindNextFile.htm","oFTP.GetCurrentDirectory()\n\r\n\rGets the current directory path on FTP server\n\r\n\roFTP.GetCurrentDirectory()Parameters\n\r\n\rNone.Return ValueCurrent directory path, 0 on errorRemarks\n\r\n\rNoneRelated\n\r\n\roFTP.SetCurrentDirectory()ExamplesCurrentDir := oFTP.GetCurrentDirectory()","oFTP.GetCurrentDirectory()","scr\\Methods/oFTP.GetCurrentDirectory.htm","oFTP.GetFile()\n\r\n\rRetrieves a file\n\r\n\roFTP.GetFile(RemoteFile, &#91;NewFile, Flags&#93;)ParametersRemoteFile\n\r\n\rExisting file name (fully qualified path or relative path to current dir)NewFile\n\r\n\rLocal path to the file to be createdFlags\n\r\n\rSee remarksReturn ValueTrue on successRemarks\n\r\n\rFlags:\n\rFTP_TRANSFER_TYPE_UNKNOWN = 0 (Defaults to FTP_TRANSFER_TYPE_BINARY)\n\rFTP_TRANSFER_TYPE_ASCII = 1\n\rFTP_TRANSFER_TYPE_BINARY = 2Related\n\r\n\roFTP.PutFile()ExampleoFTP.GetFile(&quot;MyTestScript.ahk&quot;, &quot;LocalFile.ahk&quot;, 0)","oFTP.GetFile()","scr\\Methods/oFTP.GetFile.htm","oFTP.GetFileInfo()\n\r\n\rGet File info from WIN32_FIND_DATA structure\n\r\n\roFTP.GetFileInfo(DataStruct)ParametersDataStruct\n\r\n\rData structure retrieved by .FindFirstFile() / .FindNextFile() functionsReturn ValueReturns an object with file details (properties described below)PropertiesoFile.Name\n\r\n\rName of FileoFile.CreationTime\n\r\n\rCreation TimeoFile.LastAccessTime\n\r\n\rLast Access TimeoFile.LastWriteTime\n\r\n\rLast Write TimeoFile.Size\n\r\n\rFile Size in bytesoFile.Attribs\n\r\n\rString of file attributesRemarks\n\r\n\r\n\r\n\rNone.Related\n\r\n\roFTP.FindFirstFile(), oFTP.FindNextFile()Example; None.","oFTP.GetFileInfo()","scr\\Methods/oFTP.GetFileInfo.htm","oFTP.GetFileSize()\n\r\n\rRenames a file\n\r\n\roFTP.GetFileSize(FileName &#91;, Flags&#93;)ParametersFileName\n\r\n\rExisting file name (fully qualified path or relative path to current dir)Flags\n\r\n\rSee remarksReturn ValueSize of file in bytes (-1 on error)Remarks\n\r\n\rFlags:\n\rFTP_TRANSFER_TYPE_UNKNOWN = 0 (Defaults to FTP_TRANSFER_TYPE_BINARY)\n\rFTP_TRANSFER_TYPE_ASCII = 1\n\rFTP_TRANSFER_TYPE_BINARY = 2Related\n\r\n\roFTP.FindFirstFile(), oFTP.FindNextFile()ExampleoFTP.GetFileSize(&quot;MyTestScript.ahk&quot;, 0)","oFTP.GetFileSize()","scr\\Methods/oFTP.GetFileSize.htm","oFTP.InternetReadFile()\n\r\n\rDownloads a file (with progress bar)\n\r\n\roFTP.InternetReadFile(RemoteFile, &#91;NewLocalFile, FnProgress&#93;)ParametersRemoteFile\n\r\n\rPath of remote file to downloadNewLocalFile\n\r\n\r(Optional) Local file name/path (if omitted, defaults to name of remote file, saved to script directory)FnProgress\n\r\n\r(Optional) Name of function to handle progress data (similar to registercallback). If not specified, built in function to show progress is used. (see example)Return ValueTrue on success, false otherwise.Remarks\n\r\n\rUse .LastError property to get error dataProperties set by this method.File.BytesTransfered\n\r\n\r&nbsp;Bytes transfered\n\r.File.BytesTotal\n\r\n\r&nbsp;Total bytes to transfer\n\r.File.LocalName\n\r\n\r&nbsp;Name of local file\n\r.File.RemoteName\n\r\n\r&nbsp;Name of remote file\n\r.File.StartTime\n\r\n\r&nbsp;Tick count at start of transfer\n\r.File.CurrentTime\n\r\n\r&nbsp;Current tick count\n\r.File.TransferComplete\n\r\n\r&nbsp;Transfer is complete\n\rRelated\n\r\n\roFTP.InternetWriteFile()ExampleoFTP.InternetReadFile(&quot;RTestFile.zip&quot;, &quot;LTestFile.zip&quot;, &quot;MyProgressFunction&quot;)MyProgressFunction() {global oFTPmy := oFTP.Filestatic initdone := my.BytesTransferedtotal := my.BytesTotalif ( my.TransferComplete )&nbsp;&nbsp;{&nbsp;&nbsp;Progress, Off&nbsp;&nbsp;init := 0&nbsp;&nbsp;return 1&nbsp;&nbsp;}str_sub := &quot;Time Elapsed - &quot; . Round((my.CurrentTime - my.StartTime)/1000) . &quot; seconds&quot;if !init&nbsp;&nbsp;{&nbsp;&nbsp;str_main := my.LocalName . A_Tab . &quot;-&amp;&#35;62;&quot; . A_Tab . my.RemoteName&nbsp;&nbsp;Progress,B R0-%total% P%done%,%str_sub%, %str_main% ,FTP Transfer Progress&nbsp;&nbsp;init :=1&nbsp;&nbsp;return 1&nbsp;&nbsp;}Progress, %done%Progress,,%str_sub%}","oFTP.InternetReadFile()","scr\\Methods/oFTP.InternetReadFile.htm","oFTP.InternetWriteFile()\n\r\n\rUploads a file (with progress bar)\n\r\n\roFTP.InternetWriteFile(LocalFile, &#91;NewRemoteFile, FnProgress&#93;)ParametersLocalFile\n\r\n\rPath of local file to uploadNewRemoteFile\n\r\n\r(Optional) Remote file name/path (if omitted, defaults to name of Local file)FnProgress\n\r\n\r(Optional) Name of function to handle progress data (similar to registercallback). If not specified, built in function to show progress is used. (see example)Return ValueTrue on success, false otherwise.Remarks\n\r\n\rUse .LastError property to get error dataProperties set by this method.File.BytesTransfered\n\r\n\r&nbsp;Bytes transfered\n\r.File.BytesTotal\n\r\n\r&nbsp;Total bytes to transfer\n\r.File.LocalName\n\r\n\r&nbsp;Name of local file\n\r.File.RemoteName\n\r\n\r&nbsp;Name of remote file\n\r.File.StartTime\n\r\n\r&nbsp;Tick count at start of transfer\n\r.File.CurrentTime\n\r\n\r&nbsp;Current tick count\n\r.File.TransferComplete\n\r\n\r&nbsp;Transfer is complete\n\rRelated\n\r\n\roFTP.InternetReadFile()ExampleoFTP.InternetWriteFile(&quot;TestFile.zip&quot;, &quot;RTestFile.zip&quot;, &quot;MyProgressFunction&quot;)MyProgressFunction() {global oFTPmy := oFTP.Filestatic initdone := my.BytesTransferedtotal := my.BytesTotalif ( my.TransferComplete )&nbsp;&nbsp;{&nbsp;&nbsp;Progress, Off&nbsp;&nbsp;init := 0&nbsp;&nbsp;return 1&nbsp;&nbsp;}str_sub := &quot;Time Elapsed - &quot; . Round((my.CurrentTime - my.StartTime)/1000) . &quot; seconds&quot;if !init&nbsp;&nbsp;{&nbsp;&nbsp;str_main := my.LocalName . A_Tab . &quot;-&amp;&#35;62;&quot; . A_Tab . my.RemoteName&nbsp;&nbsp;Progress,B R0-%total% P%done%,%str_sub%, %str_main% ,FTP Transfer Progress&nbsp;&nbsp;init :=1&nbsp;&nbsp;return 1&nbsp;&nbsp;}Progress, %done%Progress,,%str_sub%}","oFTP.InternetWriteFile()","scr\\Methods/oFTP.InternetWriteFile.htm","oFTP.Open()\n\r\n\rOpens an FTP connection and returns the FTP object on success, 0 on failure\n\r\n\rFTP_Open(Server, [ Username, Password ])ParametersServer\n\r\n\rFTP serverUsername\n\r\n\r(Optional) UsernamePassword\n\r\n\r(Optional) PasswordReturn ValueTrue on success, false otherwise.Remarks\n\r\n\rPort, Proxy/ProxyBypass, InternetConnectFlags can be set beforehand [see Properties in FTP_Init()]Related\n\r\n\rFTP_Init()&nbsp;,&nbsp;oFTP.CloseSocket() ,&nbsp; oFTP.Close()ExampleoFTP.Open(\"ftp.autohotkey.net\", \"myUserName\", \"myPassword\")","oFTP.Open()","scr\\Methods/oFTP.Open.htm","oFTP.PutFile()\n\r\n\rPuts a file to FTP location\n\r\n\roFTP.PutFile(LocalFile, &#91;NewRemoteFile, Flags&#93;)ParametersLocalFile\n\r\n\rExisting file nameNewRemoteFile\n\r\n\rRemote path to the file to be created (fully qualified path or relative path to current dir)Flags\n\r\n\rSee remarksReturn ValueTrue on successRemarks\n\r\n\rFlags:\n\rFTP_TRANSFER_TYPE_UNKNOWN = 0 (Defaults to FTP_TRANSFER_TYPE_BINARY)\n\rFTP_TRANSFER_TYPE_ASCII = 1\n\rFTP_TRANSFER_TYPE_BINARY = 2Related\n\r\n\roFTP.GetFile()ExampleoFTP.PutFile(&quot;LocalFile.ahk&quot;, &quot;MyTestScript.ahk&quot;, 0)","oFTP.PutFile()","scr\\Methods/oFTP.PutFile.htm","oFTP.RemoveDirectory()\n\r\n\rDeletes a directory on FTP server\n\r\n\roFTP.RemoveDirectory(DirName)ParametersDirName\n\r\n\rExisting directory name on FTP serverReturn ValueTrue on successRemarks\n\r\n\rNoneRelated\n\r\n\roFTP.CreateDirectory()ExampleoFTP.RemoveDirectory(&quot;testing&quot;)","oFTP.RemoveDirectory()","scr\\Methods/oFTP.RemoveDirectory.htm","oFTP.RenameFile()\n\r\n\rRenames a file\n\r\n\roFTP.RenameFile(Existing, New)ParametersExisting\n\r\n\rExisting file name, fully qualified path or relative path to current dirNew\n\r\n\rNew file nameReturn ValueTrue on success, false otherwiseRemarks\n\r\n\rnoneRelated\n\r\n\roFTP.DeleteFile()ExampleoFTP.RenameFile(&quot;MyScript.ahk&quot;, &quot;MyTestScript.ahk&quot;)","oFTP.RenameFile()","scr\\Methods/oFTP.RenameFile.htm","oFTP.SetCurrentDirectory()\n\r\n\rSets the current directory path on FTP server\n\r\n\roFTP.SetCurrentDirectory(DirName)ParametersDirName\n\r\n\rExisting directory name on FTP serverReturn ValueTrue on successRemarks\n\r\n\rNoneRelated\n\r\n\roFTP.GetCurrentDirectory()ExampleoFTP.SetCurrentDirectory(&quot;testing&quot;)","oFTP.SetCurrentDirectory()","scr\\Methods/oFTP.SetCurrentDirectory.htm");